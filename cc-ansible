#!/usr/bin/env bash
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"

FORCE_UPDATES=no
if [[ ! -d "$DIR/venv" ]]; then
  echo "Creating virtualenv at $DIR/venv ..."
  virtualenv --system-site-packages "$DIR/venv"
  "$DIR/venv/bin/pip" install --upgrade pip
  FORCE_UPDATES=yes
fi

source "$DIR/venv/bin/activate"

CHECK_UPDATES=yes
declare -a POSARGS=()
declare -a TRAPS=()
cleanup() {
  for exit_trap in ${TRAPS[@]}; do "$exit_trap"; done
}
trap cleanup EXIT

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -p|--playbook)
      CC_ANSIBLE_PLAYBOOK="$2"
      shift # Past arg
      ;;
    -s|--site)
      CC_ANSIBLE_SITE="$2"
      shift # Past arg
      ;;
    --check)
      # Add proper flag support for --check as an option for dry-runs
      export EXTRA_OPTS="${EXTRA_OPTS:-} --check"
      ;;
    decrypt_passwords|edit_passwords|help)
      # Special subcommand!
      command="$key"
      ;;
    -h|--help)
      command=help
      ;;
    --no-update)
      CHECK_UPDATES=no
      ;;
    *)
      POSARGS+=($key)
      ;;
  esac

  shift
done

if [[ -z "${CC_ANSIBLE_SITE:-}" ]]; then
  cat <<ERRMSG
Error: no site specified! Please specify which site to execute under with either
the --site <dir> flag or by setting the CC_ANSIBLE_SITE environment variable.

Example:
  cc-ansible --site /etc/sites/production

  CC_ANSIBLE_SITE=/etc/sites/production $(basename $0)
ERRMSG
  exit 1
fi

CC_ANSIBLE_VAULT_PASSWORD="${CC_ANSIBLE_VAULT_PASSWORD:-$CC_ANSIBLE_SITE/vault_password}"

#
# Subcommands
#

edit_passwords() {
  local tmpfile="$(mktemp)"
  _edit_passwords_cleanup() {
    rm -f "$tmpfile"
  }
  TRAPS+=(_edit_passwords_cleanup)

  echo "Decrypting passwords..."
  ansible-vault \
    --vault-password-file="$CC_ANSIBLE_VAULT_PASSWORD" \
    view "$CC_ANSIBLE_SITE/passwords.yml" >"$tmpfile"
  ${EDITOR:-vi} "$tmpfile"
  local ret=$?
  if [[ $ret -gt 0 ]]; then exit $ret; fi
  echo "Generating placeholder passwords for any missing values..."
  kolla-genpwd --passwords "$tmpfile"
  echo "Encrypting passwords..."
  ansible-vault \
    --vault-password-file="$CC_ANSIBLE_VAULT_PASSWORD" \
    encrypt "$tmpfile"
  cp "$tmpfile" "$CC_ANSIBLE_SITE/passwords.yml"
}

decrypt_passwords() {
  ansible-vault --vault-password-file="$CC_ANSIBLE_VAULT_PASSWORD" \
    view "$CC_ANSIBLE_SITE/passwords.yml"
}

help() {
  cat <<USAGE
Usage: cc-ansible [-s|--site SITE]
                  [subcommand|--playbook PLAYBOOK]
                  ARGS

Subcommands:
  edit_passwords: Update an encrypted passwords file for the given environment.
                  Opens an interactive editor and saves the results back out as
                  en encrypted file.

Examples:
  # Run the 'deploy' step for Kolla-Ansible in a 'production' site
  cc-ansible -s /path/to/sites/production deploy

  # Run the 'upgrade' step for only Ironic tags
  cc-ansible upgrade --tags ironic

  # Run an external playbook
  cc-ansible --playbook path/to/playbook.yml

  # Update the passwords file for the environment
  cc-ansible edit_passwords
USAGE
  exit 1
}

# Automatically update dependencies
if [[ "$CHECK_UPDATES" == "yes" || "$FORCE_UPDATES" == "yes" ]]; then
  # Update base pip packages
  pip_requirements="$DIR/requirements.txt"
  pip_requirements_chksum="$DIR/requirements.txt.sha256"
  if [[ "$FORCE_UPDATES" == "yes" || ! -f "$pip_requirements_chksum" ]] || \
        ! sha256sum --quiet --check "$pip_requirements_chksum"; then
    pip install -r "$pip_requirements"
    sha256sum "$pip_requirements" > "$pip_requirements_chksum"
  fi

  # Update Ansible Galaxy roles
  galaxy_role_path="$DIR/roles/galaxy.ansible.com"
  galaxy_role_requirements="$DIR/requirements.yml"
  galaxy_role_requirements_chksum="$DIR/requirements.yml.sha256"
  if [[ "$FORCE_UPDATES" == "yes" || ! -f "$galaxy_role_requirements_chksum" ]] || \
        ! sha256sum --quiet --check "$galaxy_role_requirements_chksum"; then
    ansible-galaxy install -p "$galaxy_role_path" -r "$galaxy_role_requirements"
    sha256sum "$galaxy_role_requirements" > "$galaxy_role_requirements_chksum"
  fi

  # Update vendored Kolla-Ansible
  kolla_ansible_submodule_status="$(git submodule status kolla/kolla-ansible)"
  case "${kolla_ansible_submodule_status:0:1}" in
    -|+)
      git submodule update --init kolla/kolla-ansible
      (cd kolla/kolla-ansible; python setup.py install; pip install -r requirements.txt)
      ;;
    *)
      ;;
  esac
  # Handle case of venv being recreated though submodule is up to date.
  if ! pip freeze | grep -q kolla-ansible; then
    (cd kolla/kolla-ansible; python setup.py install; pip install -r requirements.txt)
  fi

  # Update Mitogen
  MITOGEN_VERSION=0.2.8
  MITOGEN_TARBALL=/tmp/mitogen.tar.gz
  MITOGEN_INSTALL_DIR="$DIR/venv/lib/mitogen-$MITOGEN_VERSION"
  if [[ ! -d "$MITOGEN_INSTALL_DIR" ]]; then
    curl -L -o "$MITOGEN_TARBALL" "https://github.com/dw/mitogen/archive/v$MITOGEN_VERSION.tar.gz" \
      && tar -xf "$MITOGEN_TARBALL" -C "$(dirname $MITOGEN_INSTALL_DIR)" \
      && rm -f "$MITOGEN_TARBALL"
  fi
  ln -sf "$MITOGEN_INSTALL_DIR" "$DIR/venv/lib/mitogen-latest"
fi

# Handle subcommands
if [[ -n $command ]]; then
  $command "$@"
  exit $?
fi

if [[ -n "${CC_ANSIBLE_PLAYBOOK:-}" ]]; then
  echo "**********************************************************************"
  echo "* Playbook override detected! This playbook will be executed within  *"
  echo "* Kolla-Ansible's playbook context.                                  *"
  echo "**********************************************************************"
  echo

  ansible_path="$DIR/venv/share/kolla-ansible/ansible"
  playbook_file="$ansible_path/$(basename $CC_ANSIBLE_PLAYBOOK)"
  # Copy the playbook to a new location relative to the Kolla-Ansible installation
  # to allow the group_vars/ in the playbook directory to take effect.
  cp "$(realpath $CC_ANSIBLE_PLAYBOOK)" "$playbook_file"
  # Move roles out of the way so they do not have precedence in case there
  # is a collision on role name.
  mv "$ansible_path/roles" "$ansible_path/_roles"
  _playbook_override_cleanup() {
    rm -f "$playbook_file"
    mv "$ansible_path/_roles" "$ansible_path/roles"
  }
  TRAPS+=(_playbook_override_cleanup)
  # Prepare an invocation of Kolla-Ansible targeting this playbook
  POSARGS+=(deploy --playbook "$playbook_file")
fi

lockfile="$CC_ANSIBLE_SITE/.lock"
if [[ -f "$lockfile" ]]; then
  cat <<ERRMSG
ERROR: Lockfile $lockfile exists! Another process may be updating this site.
Wait until the other process finishes, or optionally stop the running process
in order to continue.
ERRMSG
  exit 1
fi

touch "$lockfile"
_lock_cleanup() {
  rm -f "$lockfile"
}
TRAPS+=(_lock_cleanup)

declare -a kolla_args=()
kolla_args+=(--configdir="$CC_ANSIBLE_SITE")
kolla_args+=(--inventory="$CC_ANSIBLE_SITE/inventory")
kolla_args+=(--key="$CC_ANSIBLE_VAULT_PASSWORD")
kolla_args+=(--passwords="$CC_ANSIBLE_SITE/passwords.yml")
# Invoke with ./kolla/defaults.yml as the Kolla-Ansible "globals", then
# add in site-specific overrides via an additional --extra flag.
kolla_args+=(--globals="$DIR/kolla/defaults.yml")
kolla_args+=(--extra "@$CC_ANSIBLE_SITE/globals.yml")
kolla_args+=(--extra node_custom_config="$DIR/kolla/node_custom_config")
kolla_args+=(--extra post_deploy_extra_play="$DIR/playbooks/post_deploy.yml")
kolla_args+=(--extra cc_ansible_site_dir="$CC_ANSIBLE_SITE")
# Override python interpreter to point to virtualenv (but only if we're
# not performing the bootstrap, which is responsible for setting up the
# virtualenv in the first place!)
if [[ "${POSARGS[@]}" != *"bootstrap-servers"* ]]; then
  # Run a quick ad-hoc command to figure out the derived value of the
  # 'virtualenv' variable, as it can differ by site.
  virtualenv=$(ansible localhost --one-line -m debug -a 'var=virtualenv' \
    --extra-vars="@$DIR/kolla/defaults.yml" \
    --extra-vars="@$CC_ANSIBLE_SITE/globals.yml" 2>/dev/null \
    | sed 's/^.*=> //' \
    | jq -r .virtualenv)
  kolla_args+=(--extra ansible_python_interpreter="$virtualenv/bin/python")
fi
kolla_args+=("${POSARGS[@]}")

kolla-ansible "${kolla_args[@]}"
