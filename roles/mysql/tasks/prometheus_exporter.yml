---
- name: Pull MySQL exporter image.
  docker_image:
    name: "{{ mysql_prometheus_exporter_docker_image }}"
  tags:
    - pull

- name: Create MySQL exporter user.
  block:
    - name: Ensure password is set.
      fail:
        msg: Please set a value for the 'mysql_prometheus_exporter_mysql_password' variable.
      when: mysql_prometheus_exporter_mysql_password is not defined
    - name: Create user.
      local_action:
        module: mysql_user
        login_host: "{{ inventory_hostname }}"
        name: "{{ mysql_prometheus_exporter_mysql_user }}"
        host: 127.0.0.1
        password: "{{ mysql_prometheus_exporter_mysql_password }}"
        priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"

- name: Configure MySQL exporter.
  block:
    # [jca 2018-08-23]
    # TODO: the following was an intent to "properly" allow communication from
    # within the container to a MySQL server running on the host OS. This meant
    # pulling the gateway host to the host OS from the container and using that
    # as the MySQL host. However, this only works if MySQL is binding on this
    # address, which it isn't - we only bind to 127.0.0.1. Instead of opening
    # up the bind address, we are now using --net=host to get around this
    # problem, which isn't ideal, but it's more secure than doing the other thing.
    # - name: Get Docker network host IPv4 address.
    #   command: >
    #     docker run --rm --entrypoint sh {{ mysql_prometheus_exporter_docker_image }}
    #       -c 'ip route'
    #   register: docker_ip_route
    # - name: Set fact based on Docker network host IPv4 address.
    #   set_fact:
    #     docker_host_local_ipv4_address: >
    #       {{ docker_ip_route.stdout_lines
    #          | select('match', '^default')
    #          | map('regex_replace', '^.* (([0-9]{1,3}\.){3}[0-9]{1,3}) .*$', '\1')
    #          | list
    #          | first }}
    #     cacheable: true
    - name: Create config directory.
      file:
        path: "{{ mysql_prometheus_exporter_config_path }}"
        state: directory
    - name: Create MySQL configuration.
      template:
        src: prometheus_exporter.my.cnf.j2
        dest: "{{ mysql_prometheus_exporter_config_path }}/my.cnf"
      notify:
        - restart prometheus exporter
    - name: Configure systemd service.
      template:
        src: prometheus_exporter.service.j2
        dest: "/etc/systemd/system/{{ mysql_prometheus_exporter_service_name }}.service"
      notify:
        - restart prometheus exporter
  tags:
    - configuration

- name: Enable MySQL exporter service on boot.
  systemd:
    service: "{{ mysql_prometheus_exporter_service_name }}"
    # TODO: this is a thorny part of ansible and we shouldn't have to do this ourselves.
    daemon_reload: yes
    state: started
    enabled: yes
