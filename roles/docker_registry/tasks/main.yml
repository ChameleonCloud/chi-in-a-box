---
- name: Create OpenStack user for Swift storage.
  local_action:
    module: os_user
    name: "{{ docker_registry_swift_username }}"
    password: "{{ docker_registry_swift_password }}"
    auth: "{{ openstack_auth }}"
    # NOTE(jca 2019-10-14):
    # Need to explicitly set this to empty to avoid
    # buggy auto-detect region attempts by this module
    cloud: ""
  no_log: True

- name: Create Docker network.
  docker_network:
    name: "{{ docker_registry_docker_network }}"
    ipam_config:
      - subnet: "{{ docker_registry_docker_network_subnet }}"

- name: Configure Docker Registry.
  block:
    - name: Create Docker Registry config directory.
      file:
        path: "{{ docker_registry_config_path }}"
        state: directory
    - name: Create Docker Registry production config.
      template:
        src: config.yml.j2
        dest: "{{ docker_registry_config_path }}/config.prod.yml"
        mode: '0640'
      notify:
        - restart docker registry
    - name: Create Docker Registry maintenance config.
      template:
        src: config.yml.j2
        dest: "{{ docker_registry_config_path }}/config.maintenance.yml"
        mode: '0640'
      vars:
        maintenance: yes
    - name: Create symbolic link for production config.
      file:
        src: "config.prod.yml"
        dest: "{{ docker_registry_config_path }}/config.yml"
        state: link
  tags:
    - configuration

- name: Configure Docker Registry services.
  include_role:
    name: chameleon.docker_service
  vars:
    service_name: "{{ item.key }}"
    service_bind_address: "{{ api_interface_address }}"
    docker_image: "{{ item.value.image }}"
    docker_network: "{{ item.value.network }}"
    docker_environment: "{{ item.value.environment }}"
    docker_mounts: "{{ item.value.mounts }}"
    docker_ports: "{{ item.value.ports|default([]) }}"
    docker_command: "{{ item.value.command|default(None) }}"
  loop: "{{ docker_registry_services|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
    - inventory_hostname in groups[item.value.group]

- name: Create garbage collection script.
  template:
    src: docker-registry-gc.sh.j2
    dest: /usr/local/sbin/docker-registry-gc
    mode: "0700"
  when:
    - inventory_hostname in groups[docker_registry_tasks.docker_registry_gc.group]

- name: Pull Docker Registry task images.
  docker_image:
    source: pull
    name: "{{ item.value.docker.image }}"
    force_source: yes
  loop: "{{ docker_registry_tasks|dict2items }}"
  loop_control:
    label: "{{ (item.value.docker | default({})).image|default(None) }}"
  when:
    - item.value.docker is defined
    - inventory_hostname in groups[item.value.group]
  tags:
    - pull

- name: Configure Docker Registry periodic tasks.
  include_role:
    name: chameleon.periodic_task
  vars:
    task_name: "{{ item.key }}"
    task_calendar: "{{ item.value.calendar }}"
    task_command: "{{ item.value.command|default(None) }}"
    task_docker: "{{ item.value.docker|default(None) }}"
  loop: "{{ docker_registry_tasks|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
    - inventory_hostname in groups[item.value.group]
