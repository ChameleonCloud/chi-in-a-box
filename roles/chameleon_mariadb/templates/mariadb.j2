#!/bin/bash
#
# MySQL Backup Script
#  Dumps mysql databases to a file for another backup tool to pick up.
#
# MySQL code:
# GRANT SELECT, RELOAD, LOCK TABLES ON *.* TO '{{ backup_database_user }}'@'localhost'
# IDENTIFIED BY '{{ backup_database_password }}';
# FLUSH PRIVILEGES;
#

ROTATE="{{ mariadb_backup_file_age }}"

set -o pipefail

{% if not enable_mariabackup %}
##### START CONFIG ###################################################

USER="{{ backup_database_user }}"
PASS="{{ backup_database_password }}"
MAX_ALLOWED_PACKET="{{ mariadb_backup_max_packet }}"
DIR="{{ mariadb_backup_origin_dir }}"

# Create temporary mysql cnf file.
TMPFILE=`mktemp /tmp/backup.XXXXXX` || exit 1
cat >"$TMPFILE" <<EOF
[client]
password=$PASS
user=$USER
max_allowed_packet=$MAX_ALLOWED_PACKET
EOF

PREFIX=mysql_backup_

ADDITIONAL_OPTIONS="--ignore-table=mysql.event"

##### STOP CONFIG ####################################################

backup_file=${DIR}/${PREFIX}`date +%Y%m%d-%H%M%S`.sql.bz2

cleanup() {
  rm -f "$TMPFILE"
  # Rotate backups
  find "${DIR}/" -maxdepth 1 -type f -name "${PREFIX}*.sql*" -mtime +${ROTATE} -print0 | xargs -0 -r rm -f
}

mkdir -p $DIR
mysqldump --defaults-extra-file="$TMPFILE" --opt --flush-logs --single-transaction \
 ${ADDITIONAL_OPTIONS} \
 --all-databases | bzcat -zc > "$backup_file"
{% endif %}

{% if enable_mariabackup %}

PREFIX=mysqlbackup-

cleanup() {
  # Rotate backups  
  docker run --rm -v mariadb_backup:/backup "{{ kolla_toolbox_image_full }}" \
  find /backup -maxdepth 1 -type f -name "${PREFIX}*" -mtime +${ROTATE} -print0 \
  | xargs -0 -r -rm -f
}

{% endif %}

trap cleanup EXIT

{% if mariadb_backup_s3_endpoint is defined and mariadb_backup_s3_key_id is defined and mariadb_backup_s3_key is defined %}
# Additionally copy backup to S3 bucket
_aws() {
  docker run --rm \
    -e AWS_ACCESS_KEY_ID="{{ mariadb_backup_s3_key_id }}" \
    -e AWS_SECRET_ACCESS_KEY="{{ mariadb_backup_s3_key }}" \
    -v "{{ mariadb_backup_s3_conf_dir }}":/root/.aws \
    -v "$backup_file":/backups/"$backup_file" \
    amazon/aws-cli \
    --endpoint="{{ mariadb_backup_s3_endpoint }}" \
    --region=us-east-1 \
    "$@"
}
_aws s3 mb s3://"{{ mariadb_backup_container_name }}"
_aws s3 cp /backups/"$backup_file" s3://"{{ mariadb_backup_container_name }}"
{% endif %}
