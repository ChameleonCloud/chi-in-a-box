#!/bin/bash
#
# MySQL Backup Script
#  Dumps mysql databases to a file for another backup tool to pick up.
#
# MySQL code:
# GRANT SELECT, RELOAD, LOCK TABLES ON *.* TO 'user'@'localhost'
# IDENTIFIED BY 'password';
# FLUSH PRIVILEGES;
#

##### START CONFIG ###################################################

USER="{{ mariadb_backup_user }}"
PASS="{{ mariadb_backup_pw }}"
MAX_ALLOWED_PACKET="{{ mariadb_backup_max_packet }}"
DIR="{{ mariadb_backup_origin_dir }}"
ROTATE="{{ mariadb_backup_file_age }}"

# Create temporary mysql cnf file.
TMPFILE=`mktemp /tmp/backup.XXXXXX` || exit 1
echo -e "[client]\npassword=$PASS\nuser=$USER\nmax_allowed_packet=$MAX_ALLOWED_PACKET" > $TMPFILE

PREFIX=mysql_backup_

ADDITIONAL_OPTIONS="--ignore-table=mysql.event"

##### STOP CONFIG ####################################################

set -o pipefail

backup_file=${DIR}/${PREFIX}`date +%Y%m%d-%H%M%S`.sql.bz2

cleanup() {
  rm -f "$TMPFILE"
  # Rotate backups
  find "${DIR}/" -maxdepth 1 -type f -name "${PREFIX}*.sql*" -mtime +${ROTATE} -print0 | xargs -0 -r rm -f
}
trap cleanup EXIT

mkdir -p $DIR
mysqldump --defaults-extra-file="$TMPFILE" --opt --flush-logs --single-transaction \
 ${ADDITIONAL_OPTIONS} \
 --all-databases | bzcat -zc > "$backup_file"

{% if mariadb_backup_s3_endpoint is defined %}
# Additionally copy backup to S3 bucket
_aws() {
  docker run --rm \
    -e AWS_ACCESS_KEY_ID="{{ mariadb_backup_s3_key_id }}" \
    -e AWS_SECRET_ACCESS_KEY="{{ mariadb_backup_s3_key }}" \
    -v "{{ mariadb_backup_s3_conf_dir }}":/root/.aws \
    -v "$backup_file":/backups/"$backup_file"
    amazon/aws-cli \
    --endpoint="{{ mariadb_backup_s3_endpoint }}" \
    --region=us-east-1 \
    "$@"
}
_aws s3 mb s3://"{{ mariadb_backup_container_name }}"
_aws s3 cp /backups/"$backup_file" s3://"{{ mariadb_backup_container_name }}"
{% endif %}
