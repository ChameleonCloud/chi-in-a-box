---
- set_fact:
    prometheus_services_list: "{{ prometheus_services | dict2items | map(attribute='value') | list }}"
    prometheus_docker_groups: >-
      {{ prometheus_services
        | dict2items
        | map(attribute='value')
        | selectattr('image', 'defined')
        | map(attribute='group') | list }}

- name: Create Docker network.
  docker_network:
    name: "{{ prometheus_docker_network_name }}"
    driver: bridge
    ipam_config:
      - subnet: "{{ prometheus_docker_network_subnet }}"
    state: present
  when: group_names | intersect(prometheus_docker_groups) | length > 0

- name: Pull Docker images.
  docker_image:
    source: pull
    name: "{{ item.image }}"
    force_source: yes
  loop: "{{ prometheus_services_list }}"
  loop_control:
    label: "{{ item.image | default('skipped') }}"
  when:
    - groups[item.group] is defined
    - inventory_hostname in groups[item.group]
    - item.image is defined
  notify:
    - "{{ item.restart_handler }}"

- name: Create config directories.
  file:
    path: "{{ item.config_dir }}"
    state: directory
  loop: "{{ prometheus_services_list }}"
  loop_control:
    label: "{{ item.config_dir | default('skipped') }}"
  when:
    - groups[item.group] is defined
    - inventory_hostname in groups[item.group]
    - item.config_dir is defined

- name: Create secrets directory.
  file:
    name: "/etc/prometheus/secrets"
    state: directory
  vars:
    service: "{{ prometheus_services['server'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: alertmanager.yml
  vars:
    service: "{{ prometheus_services['alertmanager'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: jupyterhub_exporter.yml
  vars:
    service: "{{ prometheus_services['jupyterhub-exporter'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: mysql_exporter.yml
  vars:
    service: "{{ prometheus_services['mysql-exporter'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: node_exporter.yml
  vars:
    service: "{{ prometheus_services['node-exporter'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: openstack_exporter.yml
  vars:
    service: "{{ prometheus_services['openstack-exporter'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- include_tasks: snmp_exporter.yml
  vars:
    service: "{{ prometheus_services['snmp-exporter'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

# Prometheus server task should go last as it may be using
# credentials generated in above steps.

- include_tasks: server.yml
  vars:
    service: "{{ prometheus_services['server'] }}"
  when:
    - groups[service.group] is defined
    - inventory_hostname in groups[service.group]

- name: Create Docker services.
  template:
    src: systemd.service.j2
    dest: "/usr/lib/systemd/system/{{ item.service_name }}.service"
  vars:
    bind_address: "{{ prometheus_bind_address }}"
  notify:
    - reload systemd daemon
    - "{{ item.restart_handler }}"
  loop: "{{ prometheus_services_list }}"
  loop_control:
    label: "{{ item.service_name | default('skipped') }}"
  when:
    - groups[item.group] is defined
    - inventory_hostname in groups[item.group]
    - item.service_name is defined
    - item.custom_service is not defined or (not item.custom_service | bool)

- name: Create custom services.
  template:
    src: "{{ item.service_name }}.service.j2"
    dest: "/usr/lib/systemd/system/{{ item.service_name }}.service"
  notify:
    - reload systemd daemon
    - "{{ item.restart_handler }}"
  loop: "{{ prometheus_services_list }}"
  loop_control:
    label: "{{ item.service_name | default('skipped') }}"
  when:
    - groups[item.group] is defined
    - inventory_hostname in groups[item.group]
    - item.service_name is defined
    - item.custom_service is defined and (item.custom_service | bool)

- name: Enable services.
  systemd:
    service: "{{ item.service_name }}"
    state: started
    enabled: yes
  loop: "{{ prometheus_services_list }}"
  loop_control:
    label: "{{ item.service_name | default('skipped') }}"
  when:
    - groups[item.group] is defined
    - inventory_hostname in groups[item.group]
    - item.service_name is defined
