[ml2]
mechanism_drivers = {% if enable_neutron_wireguard | bool %}wireguard,{% endif %}openvswitch,genericswitch,{% if enable_ironic_neutron_agent | bool %}baremetal,{% endif %}l2population

[ml2_type_flat]
# Allow creating flat networks against any physical provider network
# (in practice this isn't always valid, but Kolla Ansible by default is opinionated
# about what the provider networks should be named.)
flat_networks = *

[ml2_type_vlan]
{# DEPRECATED: neutron_network_vlan_ranges still takes priority if in use #}
{% if neutron_network_vlan_ranges is defined %}
network_vlan_ranges = {{ neutron_network_vlan_ranges }}
{% elif neutron_networks is defined %}
{% set network_vlan_ranges = [] %}
{% for config in neutron_networks %}{{ network_vlan_ranges.append(config.on_demand_vlan_ranges | default ([]) | map('regex_replace', '^(.*)$', config.name + ':\1') | list) }}{% endfor %}
network_vlan_ranges = {{ network_vlan_ranges | flatten | join (',') }}
{% else %}
network_vlan_ranges =
{% endif %}

#
# genericswitch ML2 plugin
#

[ngs_coordination]
{% if enable_redis | bool %}
backend_url = redis://{% for host in groups['redis'] %}{% if host == groups['redis'][0] %}admin:{{ redis_master_password }}@{{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ redis_sentinel_port }}?sentinel=kolla{% else %}&sentinel_fallback={{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ redis_sentinel_port }}{% endif %}{% endfor %}&socket_timeout=60&retry_on_timeout=yes
{% elif enable_memcached | bool %}
backend_url = memcached://{% for host in groups['memcached'] %}{% if host == groups['memcached'][0] %}{{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ memcached_port }}{% endif %}{% endfor %}
{% else %}
backend_url = file:///var/lib/neutron/ngs_coordination
{% endif %}

{% if neutron_ml2_generic_switch_configs is defined %}
{% for switch_config in neutron_ml2_generic_switch_configs %}
[genericswitch:{{ switch_config.name }}]
{% for key, value in switch_config.items() if key != 'name' %}
{{ key }} = {{ value }}
{% endfor %}

{% endfor %}
{% elif switch_configs is defined %}
{% for switch in (switch_configs | selectattr('ngs_config', 'defined')) %}
[genericswitch:{{ switch.name }}]
device_type = {{ switch.device_type }}
{% if switch.device_type.startswith('corsa') %}
switchIP = {{ switch.address }}
token = {{ switch.auth.token }}
{% else %}
ip = {{ switch.address }}
username = {{ switch.auth.username }}
{% if switch.auth.password is defined %}
password = {{ switch.auth.password }}
{% endif %}
{% if switch.auth.secret is defined %}
secret = {{ switch.auth.secret }}
{% endif %}
{% if (switch.auth.private_key is defined) and (switch.ngs_config.key_file is not defined) %}
key_file = /etc/neutron/ssh/id_{{ switch.name }}
{% endif %}
{% endif %}
{% for key, value in (switch.ngs_config | default({})).items() %}
{{ key }} = {{ value }}
{% endfor %}
{% endfor %}
{% endif %}

{% if enable_neutron_wireguard | bool %}
[wireguard]
endpoint = {{ neutron_wireguard_hub_endpoint }}
{% endif %}
