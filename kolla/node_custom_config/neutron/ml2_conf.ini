[agent]
tunnel_types =

[ml2]
mechanism_drivers = openvswitch,genericswitch{% if enable_ironic_neutron_agent | bool %},baremetal{% endif %}

[ml2_type_vlan]
network_vlan_ranges = {{ neutron_network_vlan_ranges }}

[ovs]
bridge_mappings = {{ neutron_ovs_bridge_mappings }}

{% if not enable_ironic | bool %}
[ml2_type_flat]
flat_networks = *
{% endif %}

#
# genericswitch ML2 plugin
#

[ngs_coordination]
{% if enable_redis | bool %}
backend_url = redis://{% for host in groups['redis'] %}{% if host == groups['redis'][0] %}admin:{{ redis_master_password }}@{{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ redis_sentinel_port }}?sentinel=kolla{% else %}&sentinel_fallback={{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ redis_sentinel_port }}{% endif %}{% endfor %}&socket_timeout=60&retry_on_timeout=yes
{% elif enable_memcached | bool %}
backend_url = memcached://{% for host in groups['memcached'] %}{% if host == groups['memcached'][0] %}{{ hostvars[host]['ansible_' + hostvars[host]['api_interface']]['ipv4']['address'] }}:{{ memcached_port }}{% endif %}{% endfor %}
{% else %}
backend_url = file:///var/lib/neutron/ngs_coordination
{% endif %}

{% for switch_config in neutron_ml2_generic_switch_configs %}
[genericswitch:{{ switch_config.name }}]
{% for key, value in switch_config.items() if key != 'name' %}
{{ key }} = {{ value }}
{% endfor %}

{% endfor %}
