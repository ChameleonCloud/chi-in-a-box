# Rule for cloud admin access
#"context_is_admin": "role:admin"

# Rule for resource owner access
#"owner": "tenant_id:%(tenant_id)s"

# Rule for admin or owner access
#"admin_or_owner": "rule:context_is_admin or rule:owner"

# Rule for advsvc role access
#"context_is_advsvc": "role:advsvc"

# Rule for admin or network owner access
#"admin_or_network_owner": "rule:context_is_admin or tenant_id:%(network:tenant_id)s"

# Rule for resource owner, admin or network owner access
#"admin_owner_or_network_owner": "rule:owner or rule:admin_or_network_owner"

# Rule for admin-only access
#"admin_only": "rule:context_is_admin"

# Rule for regular user access
#"regular_user": ""

# Rule of shared network
#"shared": "field:networks:shared=True"

# Default access rule
#"default": "rule:admin_or_owner"

# Rule for common parent owner check
#"admin_or_ext_parent_owner": "rule:context_is_admin or tenant_id:%(ext_parent:tenant_id)s"

# Definition of a shared address scope
#"shared_address_scopes": "field:address_scopes:shared=True"

# Create an address scope
# POST  /address-scopes
# Intended scope(s): system, project
"create_address_scope": ""

# Create a shared address scope
# POST  /address-scopes
# Intended scope(s): system, project
"create_address_scope:shared": "rule:admin_only"

# Get an address scope
# GET  /address-scopes
# GET  /address-scopes/{id}
# Intended scope(s): system, project
"get_address_scope": "rule:admin_or_owner or rule:shared_address_scopes"

# Update an address scope
# PUT  /address-scopes/{id}
# Intended scope(s): system, project
"update_address_scope": "rule:admin_or_owner"

# Update ``shared`` attribute of an address scope
# PUT  /address-scopes/{id}
# Intended scope(s): system, project
"update_address_scope:shared": "rule:admin_only"

# Delete an address scope
# DELETE  /address-scopes/{id}
# Intended scope(s): system, project
"delete_address_scope": "rule:admin_or_owner"

# Get an agent
# GET  /agents
# GET  /agents/{id}
# Intended scope(s): system
"get_agent": "rule:admin_only"

# Update an agent
# PUT  /agents/{id}
# Intended scope(s): system
"update_agent": "rule:admin_only"

# Delete an agent
# DELETE  /agents/{id}
# Intended scope(s): system
"delete_agent": "rule:admin_only"

# Add a network to a DHCP agent
# POST  /agents/{agent_id}/dhcp-networks
# Intended scope(s): system
"create_dhcp-network": "rule:admin_only"

# List networks on a DHCP agent
# GET  /agents/{agent_id}/dhcp-networks
# Intended scope(s): system
"get_dhcp-networks": "rule:admin_only"

# Remove a network from a DHCP agent
# DELETE  /agents/{agent_id}/dhcp-networks/{network_id}
# Intended scope(s): system
"delete_dhcp-network": "rule:admin_only"

# Add a router to an L3 agent
# POST  /agents/{agent_id}/l3-routers
# Intended scope(s): system
"create_l3-router": "rule:admin_only"

# List routers on an L3 agent
# GET  /agents/{agent_id}/l3-routers
# Intended scope(s): system
"get_l3-routers": "rule:admin_only"

# Remove a router from an L3 agent
# DELETE  /agents/{agent_id}/l3-routers/{router_id}
# Intended scope(s): system
"delete_l3-router": "rule:admin_only"

# List DHCP agents hosting a network
# GET  /networks/{network_id}/dhcp-agents
# Intended scope(s): system
"get_dhcp-agents": "rule:admin_only"

# List L3 agents hosting a router
# GET  /routers/{router_id}/l3-agents
# Intended scope(s): system
"get_l3-agents": "rule:admin_only"

# Get a project's auto-allocated topology
# GET  /auto-allocated-topology/{project_id}
# Intended scope(s): system, project
"get_auto_allocated_topology": "rule:admin_or_owner"

# Create a flavor
# POST  /flavors
# Intended scope(s): system
"create_flavor": "rule:admin_only"

# Get a flavor
# GET  /flavors
# GET  /flavors/{id}
# Intended scope(s): system, project
"get_flavor": "rule:regular_user"

# Update a flavor
# PUT  /flavors/{id}
# Intended scope(s): system
"update_flavor": "rule:admin_only"

# Delete a flavor
# DELETE  /flavors/{id}
# Intended scope(s): system
"delete_flavor": "rule:admin_only"

# Create a service profile
# POST  /service_profiles
# Intended scope(s): system
"create_service_profile": "rule:admin_only"

# Get a service profile
# GET  /service_profiles
# GET  /service_profiles/{id}
# Intended scope(s): system
"get_service_profile": "rule:admin_only"

# Update a service profile
# PUT  /service_profiles/{id}
# Intended scope(s): system
"update_service_profile": "rule:admin_only"

# Delete a service profile
# DELETE  /service_profiles/{id}
# Intended scope(s): system
"delete_service_profile": "rule:admin_only"

# Get a flavor associated with a given service profiles. There is no
# corresponding GET operations in API currently. This rule is
# currently referred only in the DELETE of flavor_service_profile.
# Intended scope(s): system, project
"get_flavor_service_profile": "rule:regular_user"

# Associate a flavor with a service profile
# POST  /flavors/{flavor_id}/service_profiles
# Intended scope(s): system
"create_flavor_service_profile": "rule:admin_only"

# Disassociate a flavor with a service profile
# DELETE  /flavors/{flavor_id}/service_profiles/{profile_id}
# Intended scope(s): system
"delete_flavor_service_profile": "rule:admin_only"

# Create a floating IP
# POST  /floatingips
# Intended scope(s): system, project
"create_floatingip": "rule:regular_user"

# Create a floating IP with a specific IP address
# POST  /floatingips
# Intended scope(s): system, project
"create_floatingip:floating_ip_address": "rule:admin_only"

# Get a floating IP
# GET  /floatingips
# GET  /floatingips/{id}
# Intended scope(s): system, project
"get_floatingip": "rule:admin_or_owner"

# Update a floating IP
# PUT  /floatingips/{id}
# Intended scope(s): system, project
"update_floatingip": "rule:admin_or_owner"

# Delete a floating IP
# DELETE  /floatingips/{id}
# Intended scope(s): system, project
"delete_floatingip": "rule:admin_or_owner"

# Create a floating IP port forwarding
# POST  /floatingips/{floatingip_id}/port_forwardings
# Intended scope(s): system, project
"create_floatingip_port_forwarding": "rule:admin_or_ext_parent_owner"

# Get a floating IP port forwarding
# GET  /floatingips/{floatingip_id}/port_forwardings
# GET  /floatingips/{floatingip_id}/port_forwardings/{port_forwarding_id}
# Intended scope(s): system, project
"get_floatingip_port_forwarding": "rule:admin_or_ext_parent_owner"

# Update a floating IP port forwarding
# PUT  /floatingips/{floatingip_id}/port_forwardings/{port_forwarding_id}
# Intended scope(s): system, project
"update_floatingip_port_forwarding": "rule:admin_or_ext_parent_owner"

# Delete a floating IP port forwarding
# DELETE  /floatingips/{floatingip_id}/port_forwardings/{port_forwarding_id}
# Intended scope(s): system, project
"delete_floatingip_port_forwarding": "rule:admin_or_ext_parent_owner"

# Create a network log
# POST  /log/logs
# Intended scope(s): system
"create_log": "rule:admin_only"

# Get a network log
# GET  /log/logs
# GET  /log/logs/{id}
# Intended scope(s): system
"get_log": "rule:admin_only"

# Update a network log
# PUT  /log/logs/{id}
# Intended scope(s): system
"update_log": "rule:admin_only"

# Delete a network log
# DELETE  /log/logs/{id}
# Intended scope(s): system
"delete_log": "rule:admin_only"

# Create a metering label
# POST  /metering/metering-labels
# Intended scope(s): system, project
"create_metering_label": "rule:admin_only"

# Get a metering label
# GET  /metering/metering-labels
# GET  /metering/metering-labels/{id}
# Intended scope(s): system, project
"get_metering_label": "rule:admin_only"

# Delete a metering label
# DELETE  /metering/metering-labels/{id}
# Intended scope(s): system, project
"delete_metering_label": "rule:admin_only"

# Create a metering label rule
# POST  /metering/metering-label-rules
# Intended scope(s): system, project
"create_metering_label_rule": "rule:admin_only"

# Get a metering label rule
# GET  /metering/metering-label-rules
# GET  /metering/metering-label-rules/{id}
# Intended scope(s): system, project
"get_metering_label_rule": "rule:admin_only"

# Delete a metering label rule
# DELETE  /metering/metering-label-rules/{id}
# Intended scope(s): system, project
"delete_metering_label_rule": "rule:admin_only"

# Definition of an external network
#"external": "field:networks:router:external=True"

# Create a network
# POST  /networks
# Intended scope(s): system, project
"create_network": ""

# Create a shared network
# POST  /networks
# Intended scope(s): system
"create_network:shared": "rule:admin_only"

# Create an external network
# POST  /networks
# Intended scope(s): system
"create_network:router:external": "rule:admin_only"

# Specify ``is_default`` attribute when creating a network
# POST  /networks
# Intended scope(s): system
"create_network:is_default": "rule:admin_only"

# Specify ``segments`` attribute when creating a network
# POST  /networks
# Intended scope(s): system
"create_network:segments": "rule:admin_only"

# Specify ``provider:network_type`` when creating a network
# POST  /networks
# Intended scope(s): system
"create_network:provider:network_type": "rule:regular_user"

# Specify ``provider:physical_network`` when creating a network
# POST  /networks
# Intended scope(s): system
"create_network:provider:physical_network": "rule:regular_user"

# Specify ``provider:segmentation_id`` when creating a network
# POST  /networks
# Intended scope(s): system
"create_network:provider:segmentation_id": "rule:admin_only"

# Get a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system, project
"get_network": "rule:admin_or_owner or rule:shared or rule:external or rule:context_is_advsvc"

# Get ``router:external`` attribute of a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system, project
"get_network:router:external": "rule:regular_user"

# Get ``segments`` attribute of a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system
"get_network:segments": "rule:admin_only"

# Get ``provider:network_type`` attribute of a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system
"get_network:provider:network_type": "rule:regular_user"

# Get ``provider:physical_network`` attribute of a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system
"get_network:provider:physical_network": "rule:regular_user"

# Get ``provider:segmentation_id`` attribute of a network
# GET  /networks
# GET  /networks/{id}
# Intended scope(s): system
"get_network:provider:segmentation_id": "rule:regular_user"

# Update a network
# PUT  /networks/{id}
# Intended scope(s): system, project
"update_network": "rule:admin_or_owner"

# Update ``segments`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:segments": "rule:admin_only"

# Update ``shared`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:shared": "rule:admin_only"

# Update ``provider:network_type`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:provider:network_type": "rule:admin_only"

# Update ``provider:physical_network`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:provider:physical_network": "rule:admin_only"

# Update ``provider:segmentation_id`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:provider:segmentation_id": "rule:admin_only"

# Update ``router:external`` attribute of a network
# PUT  /networks/{id}
# Intended scope(s): system
"update_network:router:external": "rule:admin_only"

# Delete a network
# DELETE  /networks/{id}
# Intended scope(s): system, project
"delete_network": "rule:admin_or_owner"

# Get network IP availability
# GET  /network-ip-availabilities
# GET  /network-ip-availabilities/{network_id}
# Intended scope(s): system
"get_network_ip_availability": "rule:admin_only"

# Definition of port with network device_owner
#"network_device": "field:port:device_owner=~^network:"

# Rule for data plane integration
#"admin_or_data_plane_int": "rule:context_is_admin or role:data_plane_integrator"

# Create a port
# POST  /ports
# Intended scope(s): system, project
"create_port": ""

# Specify ``device_owner`` attribute when creting a port
# POST  /ports
# Intended scope(s): system, project
"create_port:device_owner": "not rule:network_device or rule:context_is_advsvc or rule:admin_or_network_owner"

# Specify ``mac_address`` attribute when creating a port
# POST  /ports
# Intended scope(s): system, project
"create_port:mac_address": "rule:context_is_advsvc or rule:admin_or_network_owner"

# Specify ``fixed_ips`` information when creating a port
# POST  /ports
# Intended scope(s): system, project
"create_port:fixed_ips": "rule:context_is_advsvc or rule:admin_or_network_owner or rule:shared"

# Specify IP address in ``fixed_ips`` when creating a port
# POST  /ports
# Intended scope(s): system, project
"create_port:fixed_ips:ip_address": "rule:context_is_advsvc or rule:admin_or_network_owner"

# Specify subnet ID in ``fixed_ips`` when creating a port
# POST  /ports
# Intended scope(s): system, project
"create_port:fixed_ips:subnet_id": "rule:context_is_advsvc or rule:admin_or_network_owner or rule:shared"

# Specify ``port_security_enabled`` attribute when creating a port
# POST  /ports
# Intended scope(s): system, project
"create_port:port_security_enabled": "rule:context_is_advsvc or rule:admin_or_network_owner"

# Specify ``binding:host_id`` attribute when creating a port
# POST  /ports
# Intended scope(s): system
"create_port:binding:host_id": "rule:admin_only"

# Specify ``binding:profile`` attribute when creating a port
# POST  /ports
# Intended scope(s): system
"create_port:binding:profile": "rule:admin_only"

# Specify ``allowed_address_pairs`` attribute when creating a port
# POST  /ports
# Intended scope(s): project, system
"create_port:allowed_address_pairs": "rule:admin_or_network_owner"

# Specify ``mac_address` of `allowed_address_pairs`` attribute when
# creating a port
# POST  /ports
# Intended scope(s): project, system
"create_port:allowed_address_pairs:mac_address": "rule:admin_or_network_owner"

# Specify ``ip_address`` of ``allowed_address_pairs`` attribute when
# creating a port
# POST  /ports
# Intended scope(s): project, system
"create_port:allowed_address_pairs:ip_address": "rule:admin_or_network_owner"

# Get a port
# GET  /ports
# GET  /ports/{id}
# Intended scope(s): project, system
"get_port": "rule:context_is_advsvc or rule:admin_owner_or_network_owner"

# Get ``binding:vif_type`` attribute of a port
# GET  /ports
# GET  /ports/{id}
# Intended scope(s): system
"get_port:binding:vif_type": "rule:admin_only"

# Get ``binding:vif_details`` attribute of a port
# GET  /ports
# GET  /ports/{id}
# Intended scope(s): system
"get_port:binding:vif_details": "rule:admin_only"

# Get ``binding:host_id`` attribute of a port
# GET  /ports
# GET  /ports/{id}
# Intended scope(s): system
"get_port:binding:host_id": "rule:admin_only"

# Get ``binding:profile`` attribute of a port
# GET  /ports
# GET  /ports/{id}
# Intended scope(s): system
"get_port:binding:profile": "rule:admin_only"

# Update a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port": "rule:admin_or_owner or rule:context_is_advsvc"

# Update ``device_owner`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:device_owner": "not rule:network_device or rule:context_is_advsvc or rule:admin_or_network_owner"

# Update ``mac_address`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:mac_address": "rule:admin_only or rule:context_is_advsvc"

# Specify ``fixed_ips`` information when updating a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:fixed_ips": "rule:context_is_advsvc or rule:admin_or_network_owner or rule:shared"

# Specify IP address in ``fixed_ips`` information when updating a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:fixed_ips:ip_address": "rule:context_is_advsvc or rule:admin_or_network_owner"

# Specify subnet ID in ``fixed_ips`` information when updating a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:fixed_ips:subnet_id": "rule:context_is_advsvc or rule:admin_or_network_owner or rule:shared"

# Update ``port_security_enabled`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:port_security_enabled": "rule:context_is_advsvc or rule:admin_or_network_owner"

# Update ``binding:host_id`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system
"update_port:binding:host_id": "rule:admin_only"

# Update ``binding:profile`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system
"update_port:binding:profile": "rule:admin_only"

# Update ``allowed_address_pairs`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:allowed_address_pairs": "rule:admin_or_network_owner"

# Update ``mac_address`` of ``allowed_address_pairs`` attribute of a
# port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:allowed_address_pairs:mac_address": "rule:admin_or_network_owner"

# Update ``ip_address`` of ``allowed_address_pairs`` attribute of a
# port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:allowed_address_pairs:ip_address": "rule:admin_or_network_owner"

# Update ``data_plane_status`` attribute of a port
# PUT  /ports/{id}
# Intended scope(s): system, project
"update_port:data_plane_status": "rule:admin_or_data_plane_int"

# Delete a port
# DELETE  /ports/{id}
# Intended scope(s): system, project
"delete_port": "rule:context_is_advsvc or rule:admin_owner_or_network_owner"

# Get QoS policies
# GET  /qos/policies
# GET  /qos/policies/{id}
# Intended scope(s): system, project
"get_policy": "rule:regular_user"

# Create a QoS policy
# POST  /qos/policies
# Intended scope(s): system
"create_policy": "rule:admin_only"

# Update a QoS policy
# PUT  /qos/policies/{id}
# Intended scope(s): system
"update_policy": "rule:admin_only"

# Delete a QoS policy
# DELETE  /qos/policies/{id}
# Intended scope(s): system
"delete_policy": "rule:admin_only"

# Get available QoS rule types
# GET  /qos/rule-types
# GET  /qos/rule-types/{rule_type}
# Intended scope(s): system, project
"get_rule_type": "rule:regular_user"

# Get a QoS bandwidth limit rule
# GET  /qos/policies/{policy_id}/bandwidth_limit_rules
# GET  /qos/policies/{policy_id}/bandwidth_limit_rules/{rule_id}
# Intended scope(s): system, project
"get_policy_bandwidth_limit_rule": "rule:regular_user"

# Create a QoS bandwidth limit rule
# POST  /qos/policies/{policy_id}/bandwidth_limit_rules
# Intended scope(s): system
"create_policy_bandwidth_limit_rule": "rule:admin_only"

# Update a QoS bandwidth limit rule
# PUT  /qos/policies/{policy_id}/bandwidth_limit_rules/{rule_id}
# Intended scope(s): system
"update_policy_bandwidth_limit_rule": "rule:admin_only"

# Delete a QoS bandwidth limit rule
# DELETE  /qos/policies/{policy_id}/bandwidth_limit_rules/{rule_id}
# Intended scope(s): system
"delete_policy_bandwidth_limit_rule": "rule:admin_only"

# Get a QoS DSCP marking rule
# GET  /qos/policies/{policy_id}/dscp_marking_rules
# GET  /qos/policies/{policy_id}/dscp_marking_rules/{rule_id}
# Intended scope(s): system, project
"get_policy_dscp_marking_rule": "rule:regular_user"

# Create a QoS DSCP marking rule
# POST  /qos/policies/{policy_id}/dscp_marking_rules
# Intended scope(s): system
"create_policy_dscp_marking_rule": "rule:admin_only"

# Update a QoS DSCP marking rule
# PUT  /qos/policies/{policy_id}/dscp_marking_rules/{rule_id}
# Intended scope(s): system
"update_policy_dscp_marking_rule": "rule:admin_only"

# Delete a QoS DSCP marking rule
# DELETE  /qos/policies/{policy_id}/dscp_marking_rules/{rule_id}
# Intended scope(s): system
"delete_policy_dscp_marking_rule": "rule:admin_only"

# Get a QoS minimum bandwidth rule
# GET  /qos/policies/{policy_id}/minimum_bandwidth_rules
# GET  /qos/policies/{policy_id}/minimum_bandwidth_rules/{rule_id}
# Intended scope(s): system, project
"get_policy_minimum_bandwidth_rule": "rule:regular_user"

# Create a QoS minimum bandwidth rule
# POST  /qos/policies/{policy_id}/minimum_bandwidth_rules
# Intended scope(s): system
"create_policy_minimum_bandwidth_rule": "rule:admin_only"

# Update a QoS minimum bandwidth rule
# PUT  /qos/policies/{policy_id}/minimum_bandwidth_rules/{rule_id}
# Intended scope(s): system
"update_policy_minimum_bandwidth_rule": "rule:admin_only"

# Delete a QoS minimum bandwidth rule
# DELETE  /qos/policies/{policy_id}/minimum_bandwidth_rules/{rule_id}
# Intended scope(s): system
"delete_policy_minimum_bandwidth_rule": "rule:admin_only"

# Definition of a wildcard target_tenant
#"restrict_wildcard": "(not field:rbac_policy:target_tenant=*) or rule:admin_only"

# Create an RBAC policy
# POST  /rbac-policies
# Intended scope(s): system, project
"create_rbac_policy": ""

# Specify ``target_tenant`` when creating an RBAC policy
# POST  /rbac-policies
# Intended scope(s): system, project
"create_rbac_policy:target_tenant": "rule:restrict_wildcard"

# Update an RBAC policy
# PUT  /rbac-policies/{id}
# Intended scope(s): project, system
"update_rbac_policy": "rule:admin_or_owner"

# Update ``target_tenant`` attribute of an RBAC policy
# PUT  /rbac-policies/{id}
# Intended scope(s): system, project
"update_rbac_policy:target_tenant": "rule:restrict_wildcard and rule:admin_or_owner"

# Get an RBAC policy
# GET  /rbac-policies
# GET  /rbac-policies/{id}
# Intended scope(s): project, system
"get_rbac_policy": "rule:admin_or_owner"

# Delete an RBAC policy
# DELETE  /rbac-policies/{id}
# Intended scope(s): project, system
"delete_rbac_policy": "rule:admin_or_owner"

# Create a router
# POST  /routers
# Intended scope(s): system, project
"create_router": "rule:regular_user"

# Specify ``distributed`` attribute when creating a router
# POST  /routers
# Intended scope(s): system
"create_router:distributed": "rule:admin_only"

# Specify ``ha`` attribute when creating a router
# POST  /routers
# Intended scope(s): system
"create_router:ha": "rule:admin_only"

# Specify ``external_gateway_info`` information when creating a router
# POST  /routers
# Intended scope(s): system, project
"create_router:external_gateway_info": "rule:admin_or_owner"

# Specify ``network_id`` in ``external_gateway_info`` information when
# creating a router
# POST  /routers
# Intended scope(s): system, project
"create_router:external_gateway_info:network_id": "rule:admin_or_owner"

# Specify ``enable_snat`` in ``external_gateway_info`` information
# when creating a router
# POST  /routers
# Intended scope(s): system
"create_router:external_gateway_info:enable_snat": "rule:admin_only"

# Specify ``external_fixed_ips`` in ``external_gateway_info``
# information when creating a router
# POST  /routers
# Intended scope(s): system
"create_router:external_gateway_info:external_fixed_ips": "rule:admin_only"

# Get a router
# GET  /routers
# GET  /routers/{id}
# Intended scope(s): system, project
"get_router": "rule:admin_or_owner"

# Get ``distributed`` attribute of a router
# GET  /routers
# GET  /routers/{id}
# Intended scope(s): system
"get_router:distributed": "rule:admin_only"

# Get ``ha`` attribute of a router
# GET  /routers
# GET  /routers/{id}
# Intended scope(s): system
"get_router:ha": "rule:admin_only"

# Update a router
# PUT  /routers/{id}
# Intended scope(s): system, project
"update_router": "rule:admin_or_owner"

# Update ``distributed`` attribute of a router
# PUT  /routers/{id}
# Intended scope(s): system
"update_router:distributed": "rule:admin_only"

# Update ``ha`` attribute of a router
# PUT  /routers/{id}
# Intended scope(s): system
"update_router:ha": "rule:admin_only"

# Update ``external_gateway_info`` information of a router
# PUT  /routers/{id}
# Intended scope(s): system, project
"update_router:external_gateway_info": "rule:admin_or_owner"

# Update ``network_id`` attribute of ``external_gateway_info``
# information of a router
# PUT  /routers/{id}
# Intended scope(s): system, project
"update_router:external_gateway_info:network_id": "rule:admin_or_owner"

# Update ``enable_snat`` attribute of ``external_gateway_info``
# information of a router
# PUT  /routers/{id}
# Intended scope(s): system
"update_router:external_gateway_info:enable_snat": "rule:admin_only"

# Update ``external_fixed_ips`` attribute of ``external_gateway_info``
# information of a router
# PUT  /routers/{id}
# Intended scope(s): system
"update_router:external_gateway_info:external_fixed_ips": "rule:admin_only"

# Delete a router
# DELETE  /routers/{id}
# Intended scope(s): system, project
"delete_router": "rule:admin_or_owner"

# Add an interface to a router
# PUT  /routers/{id}/add_router_interface
# Intended scope(s): system, project
"add_router_interface": "rule:admin_or_owner"

# Remove an interface from a router
# PUT  /routers/{id}/remove_router_interface
# Intended scope(s): system, project
"remove_router_interface": "rule:admin_or_owner"

# Create a security group
# POST  /security-groups
# Intended scope(s): system, project
"create_security_group": "rule:admin_or_owner"

# Get a security group
# GET  /security-groups
# GET  /security-groups/{id}
# Intended scope(s): system, project
"get_security_group": "rule:admin_or_owner"

# Update a security group
# PUT  /security-groups/{id}
# Intended scope(s): system, project
"update_security_group": "rule:admin_or_owner"

# Delete a security group
# DELETE  /security-groups/{id}
# Intended scope(s): system, project
"delete_security_group": "rule:admin_or_owner"

# Create a security group rule
# POST  /security-group-rules
# Intended scope(s): system, project
"create_security_group_rule": "rule:admin_or_owner"

# Get a security group rule
# GET  /security-group-rules
# GET  /security-group-rules/{id}
# Intended scope(s): system, project
"get_security_group_rule": "rule:admin_or_owner"

# Delete a security group rule
# DELETE  /security-group-rules/{id}
# Intended scope(s): system, project
"delete_security_group_rule": "rule:admin_or_owner"

# Create a segment
# POST  /segments
# Intended scope(s): system
"create_segment": "rule:admin_only"

# Get a segment
# GET  /segments
# GET  /segments/{id}
# Intended scope(s): system
"get_segment": "rule:admin_only"

# Update a segment
# PUT  /segments/{id}
# Intended scope(s): system
"update_segment": "rule:admin_only"

# Delete a segment
# DELETE  /segments/{id}
# Intended scope(s): system
"delete_segment": "rule:admin_only"

# Get service providers
# GET  /service-providers
# Intended scope(s): system, project
"get_service_provider": "rule:regular_user"

# Create a subnet
# POST  /subnets
# Intended scope(s): system, project
"create_subnet": "rule:admin_or_network_owner"

# Specify ``segment_id`` attribute when creating a subnet
# POST  /subnets
# Intended scope(s): system
"create_subnet:segment_id": "rule:admin_only"

# Specify ``service_types`` attribute when creating a subnet
# POST  /subnets
# Intended scope(s): system
"create_subnet:service_types": "rule:admin_only"

# Get a subnet
# GET  /subnets
# GET  /subnets/{id}
# Intended scope(s): system, project
"get_subnet": "rule:admin_or_owner or rule:shared"

# Get ``segment_id`` attribute of a subnet
# GET  /subnets
# GET  /subnets/{id}
# Intended scope(s): system
"get_subnet:segment_id": "rule:admin_only"

# Update a subnet
# PUT  /subnets/{id}
# Intended scope(s): system, project
"update_subnet": "rule:admin_or_network_owner"

# Update ``service_types`` attribute of a subnet
# PUT  /subnets/{id}
# Intended scope(s): system
"update_subnet:service_types": "rule:admin_only"

# Delete a subnet
# DELETE  /subnets/{id}
# Intended scope(s): system, project
"delete_subnet": "rule:admin_or_network_owner"

# Definition of a shared subnetpool
#"shared_subnetpools": "field:subnetpools:shared=True"

# Create a subnetpool
# POST  /subnetpools
# Intended scope(s): project, system
"create_subnetpool": ""

# Create a shared subnetpool
# POST  /subnetpools
# Intended scope(s): system
"create_subnetpool:shared": "rule:admin_only"

# Specify ``is_default`` attribute when creating a subnetpool
# POST  /subnetpools
# Intended scope(s): system
"create_subnetpool:is_default": "rule:admin_only"

# Get a subnetpool
# GET  /subnetpools
# GET  /subnetpools/{id}
# Intended scope(s): system, project
"get_subnetpool": "rule:admin_or_owner or rule:shared_subnetpools"

# Update a subnetpool
# PUT  /subnetpools/{id}
# Intended scope(s): system, project
"update_subnetpool": "rule:admin_or_owner"

# Update ``is_default`` attribute of a subnetpool
# PUT  /subnetpools/{id}
# Intended scope(s): system
"update_subnetpool:is_default": "rule:admin_only"

# Delete a subnetpool
# DELETE  /subnetpools/{id}
# Intended scope(s): system, project
"delete_subnetpool": "rule:admin_or_owner"

# Create a trunk
# POST  /trunks
# Intended scope(s): project, system
"create_trunk": "rule:regular_user"

# Get a trunk
# GET  /trunks
# GET  /trunks/{id}
# Intended scope(s): project, system
"get_trunk": "rule:admin_or_owner"

# Delete a trunk
# DELETE  /trunks/{id}
# Intended scope(s): project, system
"delete_trunk": "rule:admin_or_owner"

# List subports attached to a trunk
# GET  /trunks/{id}/get_subports
# Intended scope(s): project, system
"get_subports": ""

# Add subports to a trunk
# PUT  /trunks/{id}/add_subports
# Intended scope(s): project, system
"add_subports": "rule:admin_or_owner"

# Delete subports from a trunk
# PUT  /trunks/{id}/remove_subports
# Intended scope(s): project, system
"remove_subports": "rule:admin_or_owner"
