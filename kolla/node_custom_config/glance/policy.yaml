# Defines the default rule used for policies that historically had an
# empty policy in the supplied policy.json file.
"default": "role:admin"

# Defines the rule for the is_admin:True check.
#"context_is_admin": "role:admin"

# Create new image
# POST  /v2/images
# Intended scope(s): system, project
"add_image": ""

# Deletes the image
# DELETE  /v2/images/{image_id}
# Intended scope(s): system, project
"delete_image": ""

# Get specified image
# GET  /v2/images/{image_id}
# Intended scope(s): system, project
"get_image": ""

# Get all available images
# GET  /v2/images
# Intended scope(s): system, project
"get_images": ""

# Updates given image
# PATCH  /v2/images/{image_id}
# Intended scope(s): system, project
"modify_image": ""

# Publicize given image
# PATCH  /v2/images/{image_id}
# Intended scope(s): system, project
"publicize_image": ""

# Communitize given image
# PATCH  /v2/images/{image_id}
# Intended scope(s): system, project
"communitize_image": ""

# Downloads given image
# GET  /v2/images/{image_id}/file
# Intended scope(s): system, project
"download_image": ""

# Uploads data to specified image
# PUT  /v2/images/{image_id}/file
# Intended scope(s): system, project
"upload_image": ""

# Deletes the location of given image
# PATCH  /v2/images/{image_id}
# Intended scope(s): system, project
"delete_image_location": ""

# Reads the location of the image
# GET  /v2/images/{image_id}
# Intended scope(s): system, project
"get_image_location": ""

# Sets location URI to given image
# PATCH  /v2/images/{image_id}
# Intended scope(s): system, project
"set_image_location": ""

# Create image member
# POST  /v2/images/{image_id}/members
# Intended scope(s): system, project
"add_member": ""

# Delete image member
# DELETE  /v2/images/{image_id}/members/{member_id}
# Intended scope(s): system, project
"delete_member": ""

# Show image member details
# GET  /v2/images/{image_id}/members/{member_id}
# Intended scope(s): system, project
"get_member": ""

# List image members
# GET  /v2/images/{image_id}/members
# Intended scope(s): system, project
"get_members": ""

# Update image member
# PUT  /v2/images/{image_id}/members/{member_id}
# Intended scope(s): system, project
"modify_member": ""

# Manage image cache
# Intended scope(s): system, project
#"manage_image_cache": "role:admin"

# Deactivate image
# POST  /v2/images/{image_id}/actions/deactivate
# Intended scope(s): system, project
"deactivate": ""

# Reactivate image
# POST  /v2/images/{image_id}/actions/reactivate
# Intended scope(s): system, project
"reactivate": ""

# Get an image task.
#
# This granular policy controls access to tasks, both from the tasks
# API as well as internal locations in Glance that use tasks (like
# import). Practically this cannot be more restrictive than the policy
# that controls import or things will break, and changing it from the
# default is almost certainly not what you want. Access to the
# external tasks API should be restricted as desired by the
# tasks_api_access policy. This may change in the future.
# GET  /v2/tasks/{task_id}
# Intended scope(s): system, project
"get_task": "role:admin"

# List tasks for all images.
#
# This granular policy controls access to tasks, both from the tasks
# API as well as internal locations in Glance that use tasks (like
# import). Practically this cannot be more restrictive than the policy
# that controls import or things will break, and changing it from the
# default is almost certainly not what you want. Access to the
# external tasks API should be restricted as desired by the
# tasks_api_access policy. This may change in the future.
# GET  /v2/tasks
# Intended scope(s): system, project
"get_tasks": "role:admin"

# List tasks for all images.
#
# This granular policy controls access to tasks, both from the tasks
# API as well as internal locations in Glance that use tasks (like
# import). Practically this cannot be more restrictive than the policy
# that controls import or things will break, and changing it from the
# default is almost certainly not what you want. Access to the
# external tasks API should be restricted as desired by the
# tasks_api_access policy. This may change in the future.
# POST  /v2/tasks
# Intended scope(s): system, project
"add_task": "role:admin"

# This policy is not used.
# DELETE  /v2/tasks/{task_id}
# Intended scope(s): system, project
"modify_task": "role:admin"

# Get a specific namespace.
# GET  /v2/metadefs/namespaces/{namespace_name}
# Intended scope(s): system, project
"get_metadef_namespace": ""

# List namespace.
# GET  /v2/metadefs/namespaces
# Intended scope(s): system, project
"get_metadef_namespaces": ""

# Modify an existing namespace.
# PUT  /v2/metadefs/namespaces/{namespace_name}
# Intended scope(s): system, project
"modify_metadef_namespace": ""

# Create a namespace.
# POST  /v2/metadefs/namespaces
# Intended scope(s): system, project
"add_metadef_namespace": ""

# Get a specific object from a namespace.
# GET  /v2/metadefs/namespaces/{namespace_name}/objects/{object_name}
# Intended scope(s): system, project
"get_metadef_object": ""

# Get objects from a namespace.
# GET  /v2/metadefs/namespaces/{namespace_name}/objects
# Intended scope(s): system, project
"get_metadef_objects": ""

# Update an object within a namespace.
# PUT  /v2/metadefs/namespaces/{namespace_name}/objects/{object_name}
# Intended scope(s): system, project
"modify_metadef_object": ""

# Create an object within a namespace.
# POST  /v2/metadefs/namespaces/{namespace_name}/objects
# Intended scope(s): system, project
"add_metadef_object": ""

# List meta definition resource types.
# GET  /v2/metadefs/resource_types
# Intended scope(s): system, project
"list_metadef_resource_types": ""

# Get meta definition resource types associations.
# GET  /v2/metadefs/namespaces/{namespace_name}/resource_types
# Intended scope(s): system, project
"get_metadef_resource_type": ""

# Create meta definition resource types association.
# POST  /v2/metadefs/namespaces/{namespace_name}/resource_types
# Intended scope(s): system, project
"add_metadef_resource_type_association": ""

# Get a specific meta definition property.
# GET  /v2/metadefs/namespaces/{namespace_name}/properties/{property_name}
# Intended scope(s): system, project
"get_metadef_property": ""

# List meta definition properties.
# GET  /v2/metadefs/namespaces/{namespace_name}/properties
# Intended scope(s): system, project
"get_metadef_properties": ""

# Update meta definition property.
# GET  /v2/metadefs/namespaces/{namespace_name}/properties/{property_name}
# Intended scope(s): system, project
"modify_metadef_property": ""

# Create meta definition property.
# POST  /v2/metadefs/namespaces/{namespace_name}/properties
# Intended scope(s): system, project
"add_metadef_property": ""

# Get tag definition.
# GET  /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}
# Intended scope(s): system, project
"get_metadef_tag": ""

# List tag definitions.
# GET  /v2/metadefs/namespaces/{namespace_name}/tags
# Intended scope(s): system, project
"get_metadef_tags": ""

# Update tag definition.
# PUT  /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}
# Intended scope(s): system, project
"modify_metadef_tag": ""

# Add tag definition.
# POST  /v2/metadefs/namespaces/{namespace_name}/tags/{tag_name}
# Intended scope(s): system, project
"add_metadef_tag": ""

# Create tag definitions.
# POST  /v2/metadefs/namespaces/{namespace_name}/tags
# Intended scope(s): system, project
"add_metadef_tags": ""

# Copy existing image to other stores
# POST  /v2/images/{image_id}/import
# Intended scope(s): system, project
"copy_from": ""
