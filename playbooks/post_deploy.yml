---
- hosts: control

  pre_tasks:
  - name: Set facts for Ironic interfaces.
    set_fact:
      ironic_interfaces:
      - device: "{{ network_interface | replace('_', '-') }}.{{ ironic_provisioning_network_vlan }}"
        bootproto: static
        address: "{{ ironic_provisioning_network_gateway }}"
        netmask: "{{ ironic_provisioning_network_cidr | ipaddr('netmask') }}"
    when: enable_ironic | bool and
          ironic_provisioning_network_vlan is defined
  - name: Set facts for Corsa interfaces.
    set_fact:
      corsa_nat_interfaces:
      - device: "{{ network_interface | replace('_', '-') }}.{{ corsa_nat_network_vlan }}"
        bootproto: static
        address: "{{ corsa_nat_network_gateway }}"
        netmask: "{{ corsa_nat_network_cidr | ipaddr('netmask') }}"
    when: corsa_nat_network_cidr is defined

  roles:
  - name: michaelrigart.interfaces
    interfaces_ether_interfaces: >
      {{ (ironic_interfaces | default([])) +
         (corsa_nat_interfaces | default([])) }}
    become: True

  tasks:
  - name: Set fact for Corsa switches.
    set_fact:
      corsa_switches: "{{ switch_configs | selectattr('device_type', 'match', '^corsa') | list }}"
    when: switch_configs is defined
  - name: Allow NAT for Corsa switches.
    iptables:
      table: nat
      chain: POSTROUTING
      source: "{{ item.nat_address }}"
      out_interface: "{{ kolla_external_vip_interface | replace('_', '-') }}"
      jump: MASQUERADE
      comment: "NAT for {{ item.name }}"
    become: yes
    loop: "{{ corsa_switches }}"
    loop_control:
      label: "{{ item.name }}"
    when: corsa_switches is defined and corsa_switches | length > 0

# Call site-specific playbook
- import_playbook: "{{ cc_ansible_site_dir }}/post_deploy.yml"

# Initialize OpenStack entities. This is done after site-specific playbooks,
# because those playbooks may affect networking, which may not be available
# until here.
- hosts: deployment
  tasks:

  ##############################
  # Ironic-related configuration
  ##############################
  - set_fact:
      glance_images_tmp: "/tmp"
      glance_images:
      - name: pxe_deploy_kernel
        container_format: aki
        disk_format: aki
        url: "https://tarballs.opendev.org/openstack/ironic-python-agent/dib/files/ipa-centos7-stable-{{ openstack_release }}.kernel"
      - name: pxe_deploy_ramdisk
        container_format: aki
        disk_format: aki
        url: "https://tarballs.opendev.org/openstack/ironic-python-agent/dib/files/ipa-centos7-stable-{{ openstack_release }}.initramfs"
  - name: Download source Glance images.
    kolla_toolbox:
      module_name: get_url
      module_args:
        url: "{{ item.url }}"
        dest: "{{ glance_images_tmp }}/{{ item.name }}"
    loop: "{{ glance_images }}"
    loop_control:
      label: "{{ item.name }}"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when: enable_ironic | bool
  - name: Create Glance images.
    kolla_toolbox:
      module_name: os_image
      module_args:
        auth: "{{ openstack_auth }}"
        state: present
        name: "{{ item.name }}"
        is_public: yes
        interface: admin
        container_format: "{{ item.container_format }}"
        disk_format: "{{ item.disk_format }}"
        filename: "{{ glance_images_tmp }}/{{ item.name }}"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    loop: "{{ glance_images }}"
    loop_control:
      label: "{{ item.name }}"
    when: enable_ironic | bool
  - name: Create baremetal flavor.
    kolla_toolbox:
      module_name: os_nova_flavor
      module_args:
        auth: "{{ openstack_auth }}"
        state: present
        name: baremetal
        interface: admin
        is_public: yes
        extra_specs:
          "resources:CUSTOM_BAREMETAL": 1
          "resources:VCPU": 0
          "resources:MEMORY_MB": 0
          "resources:DISK_GB": 0
        # Needs to be greater than largest expected disk image, yet smaller than
        # actual node capacity; we guess a low value.
        disk: 20
        ram: 1
        vcpus: 1
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when: enable_ironic | bool
  - name: Create provisioning network.
    kolla_toolbox:
      module_name: os_network
      module_args:
        auth: "{{ openstack_auth }}"
        name: "{{ ironic_provisioning_network }}"
        region_name: "{{ openstack_region_name }}"
        provider_network_type: vlan
        provider_segmentation_id: "{{ ironic_provisioning_network_vlan }}"
        provider_physical_network: physnet1
        state: present
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when: enable_ironic | bool and
          ironic_provisioning_network_vlan is defined
  - name: Create provisioning subnet.
    kolla_toolbox:
      module_name: os_subnet
      module_args:
        auth: "{{ openstack_auth }}"
        network_name: "{{ ironic_provisioning_network }}"
        name: "{{ ironic_provisioning_network }}-subnet"
        cidr: "{{ ironic_provisioning_network_cidr }}"
        allocation_pool_start: "{{ ironic_provisioning_network_cidr | next_nth_usable(2) }}"
        allocation_pool_end: "{{ ironic_provisioning_network_cidr | ipaddr('last_usable') }}"
        host_routes:
        - destination: "{{ kolla_internal_vip_address }}/32"
          nexthop: "{{ ironic_provisioning_network_gateway }}"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when: enable_ironic | bool and
          ironic_provisioning_network_cidr is defined

  ##########################
  # Public net configuration
  ##########################
  - name: Check public network configuration
    assert:
      that:
        - neutron_networks.public is defined
        - neutron_networks.public.cidr is defined
      fail_msg: |
        No 'public' neutron_network is defined! At least one externally-facing
        network should be defined, and it should be called 'public'.
  - name: Create public network
    kolla_toolbox:
      module_name: os_network
      module_args:
        auth: "{{ openstack_auth }}"
        name: public
        provider_network_type: flat
        provider_physical_network: public
        external: yes
        state: present
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
  # NOTE(jason): the os_subnet module doesn't support multiple allocation pools
  # at the moment, so only one allocation pool can be automatically created.
  - name: Create public subnet
    kolla_toolbox:
      module_name: os_subnet
      module_args:
        auth: "{{ openstack_auth }}"
        network_name: public
        name: public-subnet
        cidr: "{{ network.cidr }}"
        gateway_ip: "{{ network.gateway_ip }}"
        allocation_pool_start: "{{ network.allocation_pools[0].start | default(network.cidr | next_nth_usable(2)) }}"
        allocation_pool_end: "{{ network.allocation_pools[0].end | default(network.cidr | ipaddr('last_usable')) }}"
        state: present
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    vars:
      network: "{{ neutron_networks.public }}"

  #########################
  # Sharednet configuration
  #########################
  - name: Create shared network(s)
    kolla_toolbox:
      module_name: os_network
      module_args:
        auth: "{{ openstack_auth }}"
        name: "{{ (item.value.sharednet | default({})).network_name | default(default_sharednet_name) }}"
        provider_network_type: vlan
        # Use the first on-demand VLAN for this network.
        provider_segmentation_id: "{{ (item.value.on_demand_vlan_ranges[0].split(':')[0] | int) + 1 }}"
        provider_physical_network: "{{ item.key }}"
        shared: yes
        state: present
    loop: "{{ neutron_networks | dict2items }}"
    loop_control:
      label: "{{ item.key }}"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    vars:
      default_sharednet_name: sharednet1
    when:
      - item.value.on_demand_vlan_ranges is defined
      - item.value.on_demand_vlan_ranges | length > 0
      - item.value.sharednet.enabled | default(true) | bool
  - name: Create shared network subnet(s)
    kolla_toolbox:
      module_name: os_subnet
      module_args:
        auth: "{{ openstack_auth }}"
        network_name: "{{ (item.value.sharednet | default({})).network_name | default(default_sharednet_name) }}"
        name: "{{ (item.value.sharednet | default({})).network_name | default(default_sharednet_name) }}-subnet"
        cidr: "{{ (item.value.sharednet | default({})).cidr | default(default_sharednet_cidr) }}"
        allocation_pool_start: "{{ (item.value.sharednet | default({})).cidr | default(default_sharednet_cidr) | next_nth_usable(2) }}"
        allocation_pool_end: "{{ (item.value.sharednet | default({})).cidr | default(default_sharednet_cidr) | ipaddr('last_usable') }}"
    loop: "{{ neutron_networks | dict2items }}"
    loop_control:
      label: "{{ item.key }}"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    vars:
      default_sharednet_name: sharednet1
      default_sharednet_cidr: 10.0.0.1/24
    when:
      - item.value.on_demand_vlan_ranges is defined
      - item.value.on_demand_vlan_ranges | length > 0
      - item.value.sharednet.enabled | default(true) | bool
    register: sharednet_subnets
  - name: Create NAT router for shared network(s).
    kolla_toolbox:
      module_name: os_router
      module_args:
        auth: "{{ openstack_auth }}"
        name: sharednet-router
        interfaces: "{{ sharednet_subnets.results | selectattr('subnet', 'defined') | map(attribute='subnet') | map(attribute='name') | list }}"
        network: public
        external_fixed_ips:
          - subnet: "public-subnet"
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when:
      - sharednet_subnets is defined

  ##############################
  # Blazar-related configuration
  ##############################
  - name: Create freepool aggregate.
    kolla_toolbox:
      module_name: os_nova_host_aggregate
      module_args:
        auth: "{{ openstack_auth }}"
        state: present
        name: freepool
    run_once: True
    delegate_to: "{{ groups['control'][0] }}"
    when: enable_blazar | bool
