---
- hosts: control

  pre_tasks:
  - name: Set facts for Ironic interfaces.
    set_fact:
      ironic_interfaces:
      - device: "{{ network_interface | replace('_', '-') }}.{{ ironic_provisioning_network_vlan }}"
        bootproto: static
        address: "{{ ironic_provisioning_network_gateway }}"
        netmask: "{{ ironic_provisioning_network_cidr | ipaddr('netmask') }}"
    when: enable_ironic | bool and
          ironic_provisioning_network_vlan is defined
  - name: Set facts for Corsa interfaces.
    set_fact:
      corsa_nat_interfaces:
      - device: "{{ network_interface | replace('_', '-') }}.{{ corsa_nat_network_vlan }}"
        bootproto: static
        address: "{{ corsa_nat_network_gateway }}"
        netmask: "{{ corsa_nat_network_cidr | ipaddr('netmask') }}"
    when: corsa_nat_network_cidr is defined

  roles:
  - name: michaelrigart.interfaces
    interfaces_ether_interfaces: >
      {{ (ironic_interfaces | default([])) +
         (corsa_nat_interfaces | default([])) }}
    become: True

  tasks:
  - name: Set fact for Corsa switches.
    set_fact:
      corsa_switches: "{{ switch_configs | selectattr('device_type', 'match', '^corsa') | list }}"
    when: switch_configs is defined
  - name: Allow NAT for Corsa switches.
    iptables:
      table: nat
      chain: POSTROUTING
      source: "{{ item.nat_address }}"
      out_interface: "{{ kolla_external_vip_interface | replace('_', '-') }}"
      jump: MASQUERADE
      comment: "NAT for {{ item.name }}"
    become: yes
    loop: "{{ corsa_switches }}"
    loop_control:
      label: "{{ item.name }}"
    when: corsa_switches is defined and corsa_switches | length > 0

# Call site-specific playbook
- import_playbook: "{{ cc_ansible_site_dir }}/post_deploy.yml"

# Initialize OpenStack entities. This is done after site-specific playbooks,
# because those playbooks may affect networking, which may not be available
# until here.
- hosts: deployment
  tasks:
  # Ironic-related configuration
  - set_fact:
      glance_images_tmp: "/tmp"
      glance_images:
      - name: pxe_deploy_kernel
        container_format: aki
        disk_format: aki
        url: "https://tarballs.opendev.org/openstack/ironic-python-agent/dib/files/ipa-centos7-stable-{{ openstack_release }}.kernel"
      - name: pxe_deploy_ramdisk
        container_format: aki
        disk_format: aki
        url: "https://tarballs.opendev.org/openstack/ironic-python-agent/dib/files/ipa-centos7-stable-{{ openstack_release }}.initramfs"
  - name: Download source Glance images.
    get_url:
      url: "{{ item.url }}"
      dest: "{{ glance_images_tmp }}/{{ item.name }}"
    loop: "{{ glance_images }}"
    loop_control:
      label: "{{ item.name }}"
    when: enable_ironic | bool
  - name: Create Glance images.
    os_image:
      auth: "{{ openstack_auth }}"
      state: present
      name: "{{ item.name }}"
      is_public: yes
      interface: admin
      container_format: "{{ item.container_format }}"
      disk_format: "{{ item.disk_format }}"
      filename: "{{ glance_images_tmp }}/{{ item.name }}"
    loop: "{{ glance_images }}"
    loop_control:
      label: "{{ item.name }}"
    when: enable_ironic | bool
  - name: Create baremetal flavor.
    os_nova_flavor:
      auth: "{{ openstack_auth }}"
      state: present
      name: baremetal
      interface: admin
      is_public: yes
      extra_specs:
        "resources:CUSTOM_BAREMETAL": 1
        "resources:VCPU": 0
        "resources:MEMORY_MB": 0
        "resources:DISK_GB": 0
      # Needs to be greater than largest expected disk image, yet smaller than
      # actual node capacity; we guess a low value.
      disk: 20
      ram: 1
      vcpus: 1
    when: enable_ironic | bool
  - name: Create provisioning network.
    local_action:
      auth: "{{ openstack_auth }}"
      module: os_network
      name: "{{ ironic_provisioning_network }}"
      region_name: "{{ openstack_region_name }}"
      provider_network_type: vlan
      provider_segmentation_id: "{{ ironic_provisioning_network_vlan }}"
      provider_physical_network: physnet1
      state: present
    when: enable_ironic | bool and
          ironic_provisioning_network_vlan is defined
  - name: Create provisioning subnet.
    local_action:
      auth: "{{ openstack_auth }}"
      module: os_subnet
      network_name: "{{ ironic_provisioning_network }}"
      name: "{{ ironic_provisioning_network }}-subnet"
      cidr: "{{ ironic_provisioning_network_cidr }}"
      allocation_pool_start: "{{ ironic_provisioning_network_cidr | next_nth_usable(2) }}"
      allocation_pool_end: "{{ ironic_provisioning_network_cidr | ipaddr('last_usable') }}"
      host_routes:
      - destination: "{{ kolla_internal_vip_address }}/32"
        nexthop: "{{ ironic_provisioning_network_gateway }}"
    when: enable_ironic | bool and
          ironic_provisioning_network_cidr is defined

  # Blazar-related configuration
  - name: Create freepool aggregate.
    os_nova_host_aggregate:
      auth: "{{ openstack_auth }}"
      state: present
      name: freepool
    when: enable_blazar | bool
